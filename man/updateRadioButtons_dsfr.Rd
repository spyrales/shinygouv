% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/updateradiobuttons_dsfr.R
\name{updateRadioButtons_dsfr}
\alias{updateRadioButtons_dsfr}
\title{updateRadioButtons_dsfr}
\usage{
updateRadioButtons_dsfr(
  inputId,
  label = NULL,
  choices = NULL,
  selected = NULL,
  inline = FALSE,
  session = shiny::getDefaultReactiveDomain()
)
}
\arguments{
\item{inputId}{id de l'input}

\item{label}{label du bouton}

\item{choices}{Liste des valeurs à sélectionner (si les éléments de la liste portent un nom, c'est ce nom qui est affiché à l'utilisateur et non la valeur)}

\item{selected}{Element selectionné}

\item{inline}{Si TRUE, positionne les choix en ligne (c'est-à-dire horizontalement). Seulement si les choix sont updates}

\item{session}{la session, la valeur par défaut est getDefaultReactiveDomain().}
}
\value{
html
}
\description{
updateRadioButtons_dsfr
}
\examples{
## Only run examples in interactive R sessions
if (interactive()) {
  ui <- fluidPage_dsfr(
    radioButtons_dsfr(inputId = "inRadioButtons",
      label = "Input radio buttons",
      choices = c("Item A", "Item B", "Item C"),
      # ),
      inline = FALSE),
    actionButton_dsfr("go", "Change")
  )

  server <- function(input, output, session) {

    observeEvent(input$go, {
      updateRadioButtons_dsfr(
        session = session,
        inputId = "inRadioButtons",
        label = "Un nouveau label",
        choices = c("A" = "a", "B" = "b"),
        selected = "a",
        inline = TRUE
      )
    })

    observeEvent(input$inRadioButtons, {
      message(input$inRadioButtons)
    })
  }

  shinyApp(ui, server)
}
}
