% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/updatecheckboxinput_dsfr.R
\name{updateCheckboxInput_dsfr}
\alias{updateCheckboxInput_dsfr}
\title{updateCheckboxInput_dsfr}
\usage{
updateCheckboxInput_dsfr(
  inputId,
  label = NULL,
  choices = NULL,
  selected = NULL,
  inline = FALSE,
  choice_names = NULL,
  choice_values = NULL,
  session = shiny::getDefaultReactiveDomain()
)
}
\arguments{
\item{inputId}{id de l'input}

\item{label}{label du bouton}

\item{choices}{Liste des valeurs à sélectionner (si les éléments de la liste portent un nom, c'est ce nom qui est affiché à l'utilisateur et non la valeur)}

\item{selected}{Valeurs préselectionnées}

\item{inline}{Si TRUE, positionne les choix en ligne (c'est-à-dire horizontalement).}

\item{choice_names}{Liste de labels (ignoré si choices est défini)}

\item{choice_values}{Liste des valeurs (ignoré si choices est défini)}

\item{session}{la session, la valeur par défaut est getDefaultReactiveDomain().}
}
\value{
html
}
\description{
updateCheckboxInput_dsfr
}
\examples{

## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage_dsfr(
  radioButtons_dsfr(inputId = "inCheckboxInput", 
                    label = "Input checkbox input",
                    choices = c("Item A","Item B", "Item C")),
  actionButton_dsfr("go","Change")
)
server <- function(input, output, session) {
  
  observeEvent(input$go,{
    updateCheckboxInput_dsfr(
      session = session, 
      inputId = "inCheckboxInput",
      label = "Un nouveau label",
      choices = c("A" = "a"),
      selected = "a"
    )
  })
  
  observeEvent(input$inCheckboxInput,{
    message(input$inCheckboxInput)
  })
}
shinyApp(ui, server)
}


}
