% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/updatedaterangeinput_dsfr.R
\name{updateDateRangeInput_dsfr}
\alias{updateDateRangeInput_dsfr}
\title{updateDateRangeInput_dsfr}
\usage{
updateDateRangeInput_dsfr(
  inputId,
  label = NULL,
  start = NULL,
  end = NULL,
  session = shiny::getDefaultReactiveDomain()
)
}
\arguments{
\item{inputId}{inputId}

\item{label}{label}

\item{start}{character La date de début au format aaaa-mm-jj. Si NULL (valeur par défaut), la date utilisée est la date du jour.}

\item{end}{character La date de fin au format aaaa-mm-jj. Si NULL (valeur par défaut), la date utilisée est la date du jour.}

\item{session}{la session, la valeur par défaut est getDefaultReactiveDomain().}
}
\value{
html
}
\description{
updateDateRangeInput_dsfr
}
\examples{
## Only run examples in interactive R sessions
if (interactive()) {

  library(shiny)

  ui <- fluidPage_dsfr(
      dateRangeInput_dsfr(inputId = "daterange1",
                          label = "Date range:", start = "2001-01-01",separator = "à"),
    actionButton_dsfr("go", "Change label"),
    actionButton_dsfr("go2", "Change start"),
    actionButton_dsfr("go3", "Change end")
  )

  server <- function(input, output, session) {
    observeEvent(input$daterange1, {
      print(input$daterange1)
    })


    observeEvent(input$go, {
       updateDateRangeInput_dsfr(
        session = session,
        inputId = "daterange1",
        label = "new label"
      )

    })


    observeEvent(input$go2, {
       updateDateRangeInput_dsfr(
        session = session,
        inputId = "daterange1",
        start = "2000-01-01"
      )

    })

    observeEvent(input$go3, {
       updateDateRangeInput_dsfr(
        session = session,
        inputId = "daterange1",
        end = "2020-01-01"
      )

    })
  }
  shinyApp(ui, server)
}
}
\seealso{
\href{https://shiny.posit.co/r/reference/shiny/latest/updatedaterangeinput}{updatedaterangeinput() in Shiny}
}
